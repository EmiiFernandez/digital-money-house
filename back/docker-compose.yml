services:
  #eureka-server:
      #container_name: eureka-server
      #build:
        #context: .
        #dockerfile: ./eureka-server/Dockerfile
      #ports:
        #- "8761:8761"
      #networks:
        #- back_network

  #config-server:
    #container_name: config-server
    #build:
      #context: .
      #dockerfile: ./config-server/Dockerfile
    #ports:
      #- "8888:8888"
    #environment:
      #- EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    #depends_on:
      #- eureka-server
    #networks:
      #- back_network

  #gateway:
    #container_name: gateway
    #build:
      #context: .
      #dockerfile: ./gateway/Dockerfile
    #ports:
      #- "9091:8085"
    #environment:
      #- EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    #depends_on:
      #- eureka-server
      #- config-server
    #networks:
      #- back_network

  #user-service:
    #container_name: user-service
    #env_file:
      #- .env
    #build:
      #context: .
      #dockerfile: ./user-service/Dockerfile
    #environment:
      #MYSQL_DATABASE: ${USER_DB_DATABASE}
      #MYSQL_USER: ${USER_DB_USERNAME}
      #MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    #networks:
      #- back_network
    #depends_on:
      #- eureka-server
      #- config-server
      #- mysql_user_service
    #ports:
      #- "8081:8081"

  mysql_user_service:
    container_name: mysql_user_service
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${USER_DB_DATABASE}
      MYSQL_USER: ${USER_DB_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql_user_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back_network

  mysql_account_service:
    container_name: mysql_account_service
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${ACCOUNT_DB_DATABASE}
      MYSQL_USER: ${ACCOUNT_DB_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - mysql_account_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back_network

  postgres_keycloak:
    container_name: postgres_keycloak
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - back_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER} -d ${KEYCLOAK_DB_NAME}" ]
      interval: 30s
      timeout: 5s
      retries: 5

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command:
      - start-dev
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres_keycloak
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_DB_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_JDBC_PARAMS: 'sslmode=require'
    ports:
      - "9092:8080"
    depends_on:
      postgres_keycloak:
        condition: service_healthy
    networks:
      - back_network

volumes:
  mysql_user_data:
  mysql_account_data:
  postgres_data:

networks:
  back_network:
    driver: bridge
